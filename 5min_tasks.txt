------------------------------------------

Task 1 : Creating firebase app

- Basic setup
* Go to firebase https://console.firebase.google.com/
* Add project > give name : Auth-Development
> Unselect - google analytics > Continue
* After creating
> Go to Authentication tab
> Add Sign-in methods
> Select : 
Email/Password : Enable top toggle button > save
* Add new project for Production : Auth-Production
> Do similar to production
> In Authentication tab > Settings > Authorized domains
Remove localhost

- Api Key generate
* Select Auth-Development
* Go to Project-Overview
* Add web app : click code icon -> '</>'
* Give any name like : auth-development
> Click register app

- Using in React app
* Make a folder for project - 
npx create-react-app firebase-react-app
* Create .env.local file
* Put all key value pairs from generated api key into .env.local file as:
REACT_APP_<keyName>=<value>

- Create firebase.js as
* Install : npm i firebase
* import firebase from 'firebase/app'
* import "firebase/auth"
* const app = firebase.initializeApp({
    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID
})
* export const auth = app.auth() // Authentication instance
* export default app // firebase to use in react app

-----------------------------------------------------------

Task 2 : Creating react app

- Setup
* Install bootstrap : npm i bootstrap react-bootstrap
* Delete all files in src except : App.js, index.js and firebase.js
* Create src/components/ folder
* Move App.js inside components folder, and update in index.js
* In index.js
import "bootstrap/dist/css/bootstrap.min.css"

- App.js
* import {Container} from 'react-bootstrap'
* import SignUp component
* return (
  <Container className="d-flex align-items-center justify-content-center"
    style={{minHeight: "100vh"}}>
    <div className="w-100" style={{maxWidth: "400px"}}>
      <SignUp/>
    </div>
  </Container>
)

- Create Signup.js component as
* import {
  Card, Button, Form
} from 'react-bootstrap'
* Define refs as :
const emailRef = useRef()
const passwordRef = useRef()
const passwordConfirmRef = useRef()
* Write component as :
return (
  <>
    <Card>
      <Card.Body>
        <h2 className="text-center mb-4">Sign Up</h2>
        <Form>
          <Form.Group id="email">
            <Form.Label>Email</Form.Label>
            <Form.Control type="email" ref={emailRef} required />
          </Form.Group>
          <Form.Group id="password">
            <Form.Label>Password</Form.Label>
            <Form.Control type="password" ref={passwordRef} required />
          </Form.Group>
          <Form.Group id="password">
            <Form.Label>Password Confirmation</Form.Label>
            <Form.Control type="password" ref={passwordConfirmRef} required />
          </Form.Group>
          <Button className="w-100" type="submit">Sign Up</Button>
        </Form>
      </Card.Body>
    </Card>
    <div className="w-100 text-center mt-2">
      Already have an account? Log In
    </div>
  </>
)

-----------------------------------------------------------

Task 3 : Auth Context Setup

- Create context
* Create folder src/context/
* Create file AuthContext.js
import React, {useContext, useState, useEffect} from "react"
import {auth} from "../firebase"

const AuthContext = React.createContext()

export function useAuth() {
  return useContext(AuthContext)
}

const AuthProvider = ({children}) => {
  const [currentUser, setCurrentUser] = useState()

  function signup(email, password) {
    return auth.createUserWithEmailAndPassword(email, password)
  }

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(user => {
      setCurrentUser(user) // user can be null or userData
    })

    return unsubscribe
  }, [])

  
  const value = {
    currentUser,
    signup
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}
