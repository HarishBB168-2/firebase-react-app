------------------------------------------

Task 1 : Creating firebase app

- Basic setup
* Go to firebase https://console.firebase.google.com/
* Add project > give name : Auth-Development
> Unselect - google analytics > Continue
* After creating
> Go to Authentication tab
> Add Sign-in methods
> Select : 
Email/Password : Enable top toggle button > save
* Add new project for Production : Auth-Production
> Do similar to production
> In Authentication tab > Settings > Authorized domains
Remove localhost

- Api Key generate
* Select Auth-Development
* Go to Project-Overview
* Add web app : click code icon -> '</>'
* Give any name like : auth-development
> Click register app

- Using in React app
* Make a folder for project - 
npx create-react-app firebase-react-app
* Create .env.local file
* Put all key value pairs from generated api key into .env.local file as:
REACT_APP_<keyName>=<value>

- Create firebase.js as
* Install : npm i firebase@7.20.0
* import firebase from 'firebase/app'
* import "firebase/auth"
* const app = firebase.initializeApp({
    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID
})
* export const auth = app.auth() // Authentication instance
* export default app // firebase to use in react app

-----------------------------------------------------------

Task 2 : Creating react app

- Setup
* Install bootstrap : npm i bootstrap react-bootstrap
* Delete all files in src except : App.js, index.js and firebase.js
* Create src/components/ folder
* Move App.js inside components folder, and update in index.js
* In index.js
import "bootstrap/dist/css/bootstrap.min.css"

- App.js
* import {Container} from 'react-bootstrap'
* import SignUp component
* return (
  <Container className="d-flex align-items-center justify-content-center"
    style={{minHeight: "100vh"}}>
    <div className="w-100" style={{maxWidth: "400px"}}>
      <SignUp/>
    </div>
  </Container>
)

- Create Signup.js component as
* import {
  Card, Button, Form
} from 'react-bootstrap'
* Define refs as :
const emailRef = useRef()
const passwordRef = useRef()
const passwordConfirmRef = useRef()
* Write component as :
return (
  <>
    <Card>
      <Card.Body>
        <h2 className="text-center mb-4">Sign Up</h2>
        <Form>
          <Form.Group id="email">
            <Form.Label>Email</Form.Label>
            <Form.Control type="email" ref={emailRef} required />
          </Form.Group>
          <Form.Group id="password">
            <Form.Label>Password</Form.Label>
            <Form.Control type="password" ref={passwordRef} required />
          </Form.Group>
          <Form.Group id="password">
            <Form.Label>Password Confirmation</Form.Label>
            <Form.Control type="password" ref={passwordConfirmRef} required />
          </Form.Group>
          <Button className="w-100" type="submit">Sign Up</Button>
        </Form>
      </Card.Body>
    </Card>
    <div className="w-100 text-center mt-2">
      Already have an account? Log In
    </div>
  </>
)

-----------------------------------------------------------

Task 3 : Auth Context Setup

- Create context
* Create folder src/contexts/
* Create file AuthContext.js
import React, {useContext, useState, useEffect} from "react"
import {auth} from "../firebase"

const AuthContext = React.createContext()

export function useAuth() {
  return useContext(AuthContext)
}

const AuthProvider = ({children}) => {
  const [currentUser, setCurrentUser] = useState()
  const [loading, setLoading] = useState(true)

  function signup(email, password) {
    return auth.createUserWithEmailAndPassword(email, password)
  }

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(user => {
      setCurrentUser(user) // user can be null or userData
      setLoading(false)
    })

    return unsubscribe
  }, [])

  
  const value = {
    currentUser,
    signup
  }

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  )
}

-----------------------------------------------------------

Task 4 : Sign up component functionality

- In App.js
* import {AuthProvider} from "../contexts/AuthContext"
* Wrap all inside AuthProvider
<AuthProvider>...</AuthProvider>

- In Signup.jsx
* Import : 
import {useAuth} from "../contexts/AuthContext"
* Inside component
const {signup} = useAuth()
const [error, setError] = useState('')
const [loading, setLoading] = useState(false)

async function handleSubmit(e) {
  e.preventDefault()
  
  if(passwordRef.current.value !==
    passwordConfirmRef.current.value) {
      return setError("Passwords do not match")
  }
  try {
    setError('')
    setLoading(true)
    await signup(emailRef.current.value, passwordRef.current.value)
  } catch {
    setError("Failed to create an account")
  }
  setLoading(false)
}
* Add onSubmit on Form 
<Form onSubmit={handleSubmit}>
* Add disabled state to Sign Up button
<Button disabled={loading}
* After h2 element add
{error && <Alert variant="danger">{error}</Alert>}
* Go to page
> enter any email and different passwords
> See password do not match error
> Make password same
> See no error and probably user created
* Inside component add
const {signup, currentUser} = useAuth()
* After h2 element add
{currentUser.email}

-----------------------------------------------------------

Task 5 : Routing

- In Signup.jsx
* Inside component delete currentUser
const {signup} = useAuth()
* After h2 element remove
{currentUser.email}
* In last div add Link as
<Link to="/login" >Log In</Link>

- Create Dashboard.jsx in components as
* sfc with <div>Dashboard</div>

- Setup
* SKIP : npm i react-router-dom@5.2.0
* npm i react-router-dom
* See created user in firebase console Authentication tab.
* Create src/routing/routes.js as
import { createBrowserRouter } from "react-router-dom";
import App from "../components/App";
const router = createBrowserRouter([{ path: "/", element: <Dashboard /> },
{path:"/signup", element: <Signup/>},
{path:"/login", element: <Login/>}]);
export default router;

- IN TUTORIAL TO SKIP : In App.js
import {BrowserRouter as Router, Switch, Route} from 
'react-router-dom'
import Dashboard from "./Dashboard"
import Login from "./Login"
* Remove wrapping of AuthProvider
* In component containing <Signup/>
> Replace <Signup/> with
<Router>
  <AuthProvider>
    <Switch>
      <Route exact path="/" component={Dashboard} />
      <Route path="/signup" component={Signup} />
      <Route path="/login" component={Login} />
    </Switch>
  </AuthProvider>
</Router>

- To do in real : In App.js change as
<div className="w-100" style={{ maxWidth: "400px" }}>
  <RouterProvider router={router} />
</div>

- In AuthContext.js
* Create login function
function login(email, password) {
  return auth.signInWithEmailAndPassword(email, password)
}
* Export in value :
const value = {..., login}

- Create Login.jsx as
* Copy all from Signup.jsx
* Remove
> passwordConfirmRef
> In handleSubmit : remove if else check
> In form remove group of password-confirm
* Rename
> button to Log In
> page title to Log In
> Change last div to : 
Need an account? <Link to="/signup">Sign Up</Link>
* Change as
> const {login} = useAuth()
> In handleSubmit change signup to login
await login(...)
and setError("Failed to sign in")

- Check
* Create a account in sign up page
* Go to login page and try to login with wrong password
* Login with correct password

-----------------------------------------------------------

Task 6 : Redirect to Dashboard

- In Login.jsx and Signup.jsx
* SKIP : import {Link, useHistory} from 'react-router-dom'
* SKIP : const history = useHistory()
* SKIP : In handleSubmit after await login(..) or await signup(..)
history.push("/")
* import {Link, useNavigate} from 'react-router-dom'
* const navigate = useNavigate()
* In handleSubmit after await login(..) or await signup(..)
navigate("/")

- In AuthContext.js add
function logout() {
  return auth.signOut()
}
* export in const value

- Building Dashboard
* In Dashboard.jsx
* Inside component function
const [error, setError] = useState("");
const {currentUser, logout} = useAuth()
SKIP : const history = useHistory()
const navigate = useNavigate()
* Create handleLogout as 
async function handleLogout() {
  setError("")
  try{
    await logout()
    SKIP : history.push("/login")
    navigate("/login")
  } catch {
    setError("Failed to log out")
  }
}
* In return replace with
<>
  <Card>
    <Card.Body>
      <h2 className="text-center mb-4">Profile</h2>
      {error && <Alert variant="danger">{error}</Alert>}
      <strong>Email:</strong> {currentUser.email}
      <Link to="/update-profile" className="btn btn-primary w-100 mt-3">
        Update Profile
      </Link>
    </Card.Body>
  </Card>  
  <div className="w-100 text-center mt-2">
    <Button variant="link" onClick={handleLogout}>Log Out</Button>
  </div>
</>

- SKIP : Private route for Dashboard
* Create PrivateRoute.jsx in components folder
* 
const PrivateRoute = ({component: Component, ...rest}) => {
  const {currentUser} = useAuth()
  return (
    <Route
      {..rest}
      render={props => {
        return currentUser ? <Component/> : <Redirect to="/login" />
      }}
    >
    </Route>
  )
}
* Using it in App.js
<PrivateRoute exact path="/" component={Dashboard} />

- Private route for Dashboard
* Create PrivateRoute.jsx in src/routing/ folder
* 
const PrivateRoutes = () => {
  const {currentUser} = useAuth()

  return currentUser ? 
      <Outlet /> :
      <Navigate to="/login" />;
}
* Using it in routes.js
> Remove current Dashboard route
> In root add 
{
  element: <PrivateRoutes />,
  children: [
    {
      path: "/",
      element: <Dashboard/>
    }
  ]
}

- Check
* Login
* See that directed to Dashboard
* Logout 
* See that redirected to login

-----------------------------------------------------------

Task 7 : Password reset

- In Login.jsx
* Below form add
<div className="w-100 text-center mt-3">
  <Link to="/forgot-password">Forgot Password?</Link>
</div>

- In AuthContext.js
* Create function
function resetPassword(email) {
  return auth.sendPasswordResetEmail(email)
}
* Export it in value

- Create ForgotPassword.jsx as
* Copy Login.jsx here
* Add 
const {resetPassword} = useAuth()
const [message, setMessage] = useState("")
> After <h2>
{message && <Alert variant="success">{message}</Alert>}
* Change as
> Rename name of Component
> Rename heading to "Password Reset"
> Rename Log In button to "Reset Password"
> Rename Forgot Password link as 
<Link to="/login">Login</Link>
* Remove
> passwordRef
> password input group 
> useNavigate
* Change handleSubmit as
function handleSubmit(e) {
  e.preventDefault()
  try {
    setMessage("")
    setError("")
    setLoading(true)
    await resetPassword(emailRef.current.value)
    setMessage("Check your inbox for further instruction")
  } catch {
    setError("Failed to reset password.")
  }
  setLoading(false)
}

- Add route
* SKIP : In App.js add
<Route path="/forgot-password" component={ForgotPassword} />
* In src/routing/routes.js add
{ path: "/forgot-password", element: <ForgotPassword/> }

- Check
* Go to reset password page
* Enter a not registered email
* See failed to reset password message.
* Use a temporary email service : yopmail.com
* Register using it
* Log out > Forgot Password
* Enter the email > Click reset password
* Check email in inbox
* Open email > Reset password using link
* Use new password to login.

-----------------------------------------------------------

Task 8 : Update Profile

- In routing.js
* Add route in PrivateRoutes children as
{ path: "/update-profile", component:<UpdateProfile/>}

- In AuthContext.js
* Create function
function updateEmail(email) {
  return currentUser.updateEmail(email)
}
function updatePassword(password) {
  return currentUser.updatePassword(password)
}
* Export in value as
{..., updateEmail, updatePassword}

- Create UpdateProfile.jsx as
* Copy form Signup.jsx
* Change as
> Rename component name
> const {currentUser, updateEmail,
  updatePassword} = useAuth
> Rename header to "Update Profile"
> Give default value to email input as
<Form.Control ... defaultValue={currentUser.email} />
> In both password input remove required and
 provide placeholder as
placeholder="Leave blank to keep the same"
> Change button text to "Update"
> Change last div from "Already have an account" to
<Link to="/">Cancel</Link>
* In handleSubmit before try add
async function handleSubmit(e) {
  ...
  const promises = []
  if (emailRef.current.value !==
    currentUser.email) {
    promises.push(updateEmail(emailRef.current.value))
  }
  if (passwordRef.current.value) {
    promises.push(updatePassword(passwordRef.current.value))
  }

  try{
    ...await Promise.all(promises)...
  } catch {...}
  setLoading(false)
}

- Check as :
* Goto login page and login
* Goto update profile
* Enter different email
* Goto update profile
* Enter new password
* Login using new password


TODO : Add to 5min tasks, check time taken, add to 5 min repo and tasks index : Completed
